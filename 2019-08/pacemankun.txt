分支管理
--------------------------------------------------------------------------------
分支就是科幻电影里面的平行宇宙，当你正在电脑前努力学习Git的时候，你正在另一个平行宇宙里努力学习SVN
两个平行宇宙互不干扰，那对现在的你也没啥影响；某个时间点，两个平行宇宙合并了
结果，你既学会了Git又学会了SVN

分支在实际中有什么用呢
假设你准备开发一个新功能，但是需要两周才能完成，第一周你写了50%的代码，如果立刻提交，由于代码还没写完，不完整的代码库会导致别人不能干活了，如果等代码全部写完再一次提交，又存在丢失每天进度的巨大风险

现在有了分支，就不用怕
创建了一个属于你自己的分支，别人看不到，还继续在原来的分支上正常工作，在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上，这样，既安全，又不影响别人工作



创建与合并分支【分支名、HEAD都是指针】
--------------------------------------------------------------------------------
针对那个分支开发就在该分支上创建新的功能分支
dev上的分支，只能合并到dev上，不可跨支 
每次提交，Git都把它们串成一条时间线，这条时间线就是默认分支"master"
用分支名指向最新提交(确定提交点) 
用HEAD指向当前分支(确定当前分支) 



当创建dev分支时，Git新建了一个指针叫dev，指向与master相同的提交点
再切换到dev分支，把HEAD指向dev分支，就表示当前分支在dev分支上了
$ git branch dev//创建dev分支
$ git checkout dev//切换到dev分支
$ git checkout -b dev//创建并切换到dev分支
$ git branch -a//会列出本地、远程的所有分支,当前本地分支前面会标个*号




从现在开始，对工作区的修改和提交就是针对dev分支
比如新提交一次后，dev指针往前移动一步，而master指针不变
切换回master分支查看当初操作的文件，看不见修改的内容
因为那个提交是发生在dev分支上，而master分支此刻的提交点并没有变
$ git checkout master//切换回master分支
//Your branch is ahead of 'origin/master' by 1 commit.
//Git还会提示我们当前master分支比远程库的master分支要超前1个提交(dev上的提交)




假如我们在dev分支上的工作完成了，就可以把dev分支合并到master分支上
怎么合并？直接把master指向dev分支的最新提交点，HEAD指向master分支
查看当初操作的文件，可以看到修改的内容，和dev分支的最新提交是完全一样
$ git merge dev //合并-指定分支到-当前分支
Fast-forward//Git告知,这次合并是“快进模式”
//直接把master指针,指向dev分支的最新提交;HEAD指针,指向master分支
//master分支的时间轴自动向前移动1步,来记录这次提交




Git鼓励你使用分支完成某个任务，合并后再删掉分支
这和直接在master分支上工作效果是一样的，但过程更安全
怎么删？直接把dev指针删掉就行，剩下master主分支
$ git branch -d dev





解决冲突
--------------------------------------------------------------------------------
【自己本地版本库范畴-解决自己的冲突】
人生不如意之事十之八九，合并分支往往也不是一帆风顺的
比如我们针对master分支，开发的功能分支feature1
feature1分支功能开发完毕后，合并到master分支上
凡合并feature1分支前，master主分支上有新的提交或合并  此次合并必conflict 见图1
打开冲突文件，手解突本质是取舍新旧，Git用<<，==，>>标记出不同分支的内容
取舍毕，将该版add commit  主分支master时间线上多了1个版本提交点  见图2
该提交点的内容就是融合了分支feature1内容的版本  见图2





分支策略/多人协作
--------------------------------------------------------------------------------


推送分支(push) 
想推送到远程仓库xx分支，就origin xx分支
本地远程分支对应，push自动创建(first-u-建联系)，远程手动删除【统筹者】
$ git push -u origin dev        git push origin dev

分支完全可以在本地自己藏着玩，是否推送，视心情而定

master分支是发布分支(生产环境)，因此要时刻与远程同步
dev分支是开发分支(测试环境)，所有成员都需要在上面工作，所以也需要程同步

bug分支只用于在本地修复bug，就没必要推到远程
feature分支是否推到远程，取决于你是否单人开发这个功能独享该分支

拉取分支(pull fetch) 
多人协作时，大家都会往master和dev分支上推送各自的修改
现在，模拟一个partner，在他的电脑或者你电脑的另一个目录 下  克隆远程仓库
你的小伙伴从远程库clone时，本地只有默认的master分支  +
小伙伴要在dev分支上开发，就必须在本地创建和远程分支对应的分支，本地和远程分支的名称最好一致【苦哈哈】
$ git checkout -b dev origin/dev//本地创建与远程分支对应的分支并切换到该分支
//Switched to a new branch 'liukun'
//Branch 'dev' set up to track remote branch 'dev' from 'origin'
//本地已创建dev分支,且已关联远程dev分支,且本地已切换到dev分支


//笨方法(用于亡羊补牢)
git branch dev//本地创建dev分支
git branch --set-upstream dev origin/dev//建立本地分支和远程分支的关联


【大家远程库范畴-解决与其他小伙伴的冲突】
现在，这个小伙伴就可以在dev上修改，然后时不时地把dev分支push到远程仓库的dev分支
你的小伙伴已经向origin/dev分支推送了他的提交，而碰巧你也对同个文件作了修改，并试图推送

推送失败，是因为远程分支比你的本地更新，解决办法也很简单
Git已经提示我们，先用git pull把最新的提交从origin/dev拉取下来，尝试自动合并远程代码
如有冲突，在本地解决冲突再提交，最后推送到远程dev上
git pull//把远程的dev内容拉取到本地自动合并 有冲突,需要手动解决
//CONFLICT (content): Merge conflict in 23.txt
//Automatic merge failed; fix conflicts and then commit the result


因此，多人协作的工作模式通常是这样：
首先，可以试图用git push origin <branch-name>推送自己的修改
推送失败，是因为远程分支比你的本地更新，需要先用git pull  尝试自动合并远程代码
如果合并有冲突(修改了同个文件) 则解决冲突，并在本地提交，最后push
如果合并无冲突(你俩没有修改同个文件) ，快进模式-本地版本号自动前迈1步，故而不提交直push，见图8 

俩人开发一个feature，公用一个远程仓库分支
push前--用pull命令--先把小伙伴更新的文件/代码   拉取下来   尝试自动合并  
直接push  大概率会因为远程分支比你的本地更新  而导致推送失败  到时还得pull   不如先pull  




暂冻工作区【stash不常用】
--------------------------------------------------------------------------------
当你接到一个修复一个代号101的bug的任务时，很自然地，你想创建一个分支issue1来修复它，但是，当前正在dev上进行的工作还没有提交。工作只进行到一半，还没法提交，预计完成还需1天时间。但是，必须在两个小时内修复该bug，怎么办？
Changes to be committed:
	new file:   hello.py

Changes not staged for commit:
	modified:   readme.txt


好在提供一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作
git stash


现在，用git status查看工作区，就是干净的(除非有 还未被Git管理的文件)
因此可以放心地创建分支来修复bug
首先确定要在哪个分支上修复bug，假定需要在master分支上修复，就从master创建临时分支
$ git checkout master//切到master分支
$ git branch//创建分支issue1
$ git checkout issue1//切到issue1分支完成bug修复
//切回master分支,合并到master分支后,删除issue1分支


太棒了，原计划两个小时的bug修复只花了5分钟！现在，是时候接着回到dev分支干活了！
$ git checkout dev //切到dev分支
$ git stash pop//恢复工作现场,同时删除stash内容





























