# 首先非常感谢廖老师的辛勤付出
# 跟着廖老师的教程学习了python的高阶用法
# 又来跟着学习git用法
# 廖老师的讲解非常易懂，适合入门小白
# 再次 90 度鞠躬感谢！


# Git命令总结


# 1.安装完git的配置
git config --global user.name "your name"
git config --global user.email "your email address"

# 2.git仓库的初始化
git init

# 3.把文件添加到版本库
git add <file-name>

# 4.把文件提交到版本库
git commit -m "Submit instructions"

# 5.仓库状态管理
git status

# 6.查看文件修改内容
git diff <file-name>

# 7.查看文件提交历史纪录
git log

# 8.将文件提交历史简化
git log --pretty=oneline <file-name>

# 9.版本回退上一个版本或上上一个版本
git reset --hard HEAD^ or git reset --hard HEAD^^

# 10.将版本回退到往上100个版本
git reset --hard HEAD~100

# 11.将版本回退到某个版本(commit-id)
git reset --hard commit-id

# 12.关机后，仍可查看提交历史纪录
git reflog

# 13.将暂存区的修改丢弃
git reset HEAD <file-name>

# 14.将工作区的文件修改丢弃
git checkout -- <file-name>
# 15.删除工作区文件
rm file-name
git rm <file-name>
git commit -m "mark"

# 16.实现与github的免密push。首先，生成密钥对；其次将公钥添加到github
$ ssh-keygen -t rsa/dsa -C "description" 

# 17.将本地仓库与远程库相关联
$ git remote add origin git@github.com:xxx/xxx.git

# 18.将本地master分支与远程master分支关联起来并推送
$ git push -u origin master

# 19.从远程库克隆
git clone git@github.com:xxx/xxx.git

# 20.查看分支
$ git branch

# 21.创建分支
$ git branch <branch-name>

# 21.切换分支
$ git checkout <branch-name>

# 22.创建加切换分支
$ git checkout -b <branch-name>

# 23.合并某分支<branch-name>到当前分支
$ git merge <branch-name>

# 24.删除分支
$ git branch -d <branch-name>
#强删分支
$ git branch -D <branch-name>

# 25.从远程仓库删除分支
$ git push origin :<branch-name>

# 26.查看分支合并图
$ git log --graph
$ git log --graph --pretty=oneline --abbrev-commit

# 27.非快速模式合并，生成一个新的commit
$ git merge --no-ff -m "description" <branch-name>

# 28.将工作区现场保存起来
$ git stash

# 29.查看工作区保存在哪
$ git stash list

# 30.恢复最新工作区内容,并删除stash
$ git stash pop

# 31.恢复指定stash
$ git stash apply stash@[list-num]
$ git stash drop stash@[list-num]

# 32.查看远程库信息
$ git remote

# 33.从本地push分支到远程库
$ git push origin <branch-name>

# 34.拉取远程分支的最新提交
$ git pull

# 35.在本地创建和远程分支对应的分支
$ git checkout -b <branch-name> origin/<branch-name>

# 36.建立本地分支与远程分支的关联
$ git branch --set-upstream-to=origin/<branch-name> <branch-name>

# 37.本地创建标签,默认最新提交
git tag <tag-name>

# 38.给某个提交打标签
git tag <tag-name> <commit-id>

# 39.创建带说明的标签
git tag -a <tag-name> -m "description" <commit-id>

# 40.显示标签详情
git show <tag-name>

# 41.推送标签到远程
git push origin <tag-name>

# 42.一次性推送完
git push origin --tags

# 43.删除本地标签
$ git tag -d <tag-name>

# 44.删除远程标签，先删除本地标签
$ git push origin :refs/tags/<tag-name>

# 45.忽略特殊文件的提交，创建一个特殊.gitignore文件
