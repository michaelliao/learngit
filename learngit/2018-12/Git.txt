Git 
参考 ：https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001374829472990293f16b45df14f35b94b3e8a026220c5000
-------------------------------基本操作-------------------------------------------
1、 install 

2、 配置账号密码
git config --global user.name "wangfeng"
git config --global user.email "541172290@qq.com"
在git命令行中适当显示颜色
git config --global color.ui true
配置别名：git status =>git st 
	git config --global alias.st status
		git reset HEAD =>git unstage
	git config --global alias.unstage 'reset HEAD'
		log输出
	git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
注意git config命令的--global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址

3、 进入某个目录，通过 git init命令把某个目录变成Git可以管理的仓库
目录下会生成.git 目录 ，该目录用于git管理 ，注意，不要动！！！

4、提交文件
	第一步，添加，用命令git add，把文件添加到仓库：
	第二步，提交，用命令git commit -m，把文件提交到仓库
分为两步是因为， 第一步可以分次add 多个文件， 用来最终哦一次性提交

git status 
	查看工作目录的状态
git diff filename
	比较filename与仓库中filename的差别，git add 之后便没有差别

git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别：

git log [--pretty=oneline]
git log --graph --pretty=oneline --abbrev-commit
	查看提交日志
git reflog 
	查看历史日志

git中使用HEAD 显示最新版本 ，上一版本为HEAD^,上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。

git reset --hard HEAD^  回退到上一版本
	注意 Windows中 ，HEAD^ ,^是特殊字符， 需要用"" 圈起来，且commitId 不支持缩写前几位

git reset HEAD filename
	将filename 从stage 中撤销，将修改放回工作区

git checkout -- filename 
	将filename 从stage中撤销， 并还原本地修改

----------------------远程仓库---------------------------
1、github
	ssh-keygen -t rsa -C "youremail@example.com"
	复制公钥到github SSH keys 中

2、github 上创建一个空repository 复制SSH连接地址
本地库管理远程库
	git remote add origin master [sshaddress]git@github:adcwa/learngit.git
推送本地所有内容到远程仓库 ,origin 是远程库的意思,当远程仓库为空时， 使用-u 参数
	git push -u origin master 
查看远程库信息：
	git remote -v
删除已有的远程库
	git remote rm remotereponame
上面提到的origin是git 默认的远程库名 ，可以调整
	git remote add <origin> master [sshaddress]git@github:adcwa/learngit.git
----------------------分支管理-----------------------------
创建dev分支
	git checkout -b dev 
		== git branche dev and git checkout dev
查看当前分支
	git branch
切换回master 分支
	git checkout master 
将dev的文件合并到master上
	git merge dev
	--no-ff :开启非Fasg-Foward 模式，可以保留分支历史
	merge时可能会有冲突， 手动将冲突的地方解决掉之后重新
	git add filename,git commit -m ""  ,此时 commit 全部，则master会自动更新到最新版本
删除dev分支
	git branch -d dev 
	未合并的分支删除使用-D参数

远程分支管理
	创建远程分支
		1、推送本地分支到远程
		git push origin dev 
		2、将远程的分支拉取到本地
		git checkout -b dev origin/dev
		3、将本地分支于远程分支建立关联,然后才可以进行pull	
		git branch --set-upstream-to=origin/<branch> dev
		？git branch --set-upstream branch-name origin/branch-name？


-----------------------工作区隐藏------------------------------------
在工作时将为add 到资源库的文件隐藏
	git stash 
查看stash
	git stash list 
恢复stash
	1 git stash apply stash@{0}  and git stash drop 
	2 git stash pop 

------------------------多人协作的工作模式-----------------------------

首先，可以试图用git push origin <branch-name>推送自己的修改；

如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；

如果合并有冲突，则解决冲突，并在本地提交；

没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！

如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to <branch-name> origin/<branch-name>。

将本地未push的分叉提交整理成直线
git rebase 

-------------------------tag管理------------------------------------
从commitid那次提交打tag , 为空则从head 打
	git tag tagname [commitid] 
	git tag -a tagname -m "tag description" [commitid] 
查看tag 
	查看指定tagname:git show tagname 
	查看所有tag:git tag 
tag删除
	git tag -d tagname 
tag推送到远程
	推送某个tag:git push origin tagname
	推送所有tag:git push origin --tags
	删除已经推送到远程的tag:
		1、删除本地tagname:git tag -d tagname
		2、推送本地删除：git push origin :refs/tags/tagname

----------------------gitignore--------------------------------------
示例范本：
https://github.com/github/gitignore
手动维护.gitignore文件，添加需要过滤的规则
规则检查,检查文件与规则哪些冲突：
	git check-ignore -v <filename>

----------------------git 服务器--------------------------------------
1、linux运行环境
2、安装git ：sudo apt-get install git or sudo yum install git 
3、添加git用户
	sudo adduser git 
	禁用shell登陆权限：/etc/passwd
		git:x:1001:1001:,,,:/home/git:/bin/bash  => git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell
4、录入公钥
	/home/git/.ssh/authorized_keys

要方便管理公钥，用Gitosis；

要像SVN那样变态地控制权限，用Gitolite。


