感谢老师！教程写得太好了！
其实之前项目中已经用过git，再次来学习发现现在才真正的了解git。
了解git才发现真的非常好用，功能太NB了！

自己记录的常用命令
1.git init 初始化项目
2.git add . 提交所有文件
3.git commit -m ‘’提交次版本库并且加上注视 会生成一个commit_id 方便回退
4.git log 看当前窗口自己的提交记录可以回退到之前的版本
加上 --pretty=oneline 简介log，
	git relog 关闭窗口后看以前的历史记录
5.git reset --hard  xx    xx:commit_id返回到某个提交版本  xx：HAED^ 一个^代表回退一个版本  100个 HEAD~100
6.git diff 比较当前本地和最新的版本有哪些更改
7.git status 追踪当前git的状态
8.git checkout --filename 还没add 之前放弃本地修改回到上一次add后的状态
git checkout -- .   点代表所有文件

9.git rm filename 删除文件

10.git remote add origin xx仓库地址
git push -u origin master
把本地仓库推送到git仓库  origin：远程仓库 -u：本地和远程关联

11.git checkout -b dev 新建dev分支并且切换到dev分支
12.git branch 查看所有分支情况
git branch name 创建分支
13.git branch -d name 删除分支
14.git merge dev 把dev分支合并到当前所在分支
git merge --no-ff -m “合并提交” dev  合并分支并且禁用 fast forword模式，并且合并后有一个提交 所有-m 
15.git stash  把当前的修改缓存起来暂不提交，然后可以去其他分支操作。
git stash list 查看缓存的内容
git stash pop 恢复缓存工作空间并且删除记录  = git stash apply + git stash drop
16.git branch -D name 比如在master分支删除dev分支 但是还没有合并 可以用-D命令强制删除
17.git remote -v 查看远程仓库
18.git checkout -b dev origin/dev  本地创建和远程仓库dev一样的分支
19.git branch --set-upstream branch-name origin/branch-name；本地分支和远程分支建立关联
20.git tag tagname [commit_id]  用于对commit打标签，默认是为HEAD打标签，因为commit太长了不容易记 tagname：v0.1 这种
git tag -a tagname -m “something” [commmit _id]  -a指定标签名 -m 指定说明 
git show tagname 查看某个标签信息
