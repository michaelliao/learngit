谢谢廖老师的无私分享！
读完教程受益匪浅！
廖老师的教程行文流畅，言简意赅，给出的例子也非常贴切，跟着做下来对知识点的掌握也更加牢固。
以前刚入门的时候就看了廖老师的JavaScript教程，很多不理解的东西被老师这么一讲，豁然开朗。
后来又发现了Git教程，如获至宝，文章确实是面向小白的，也应了老师开头那句“史上最浅显易懂的Git教程”！
这两天刚好工作上刚好没事做了，就开始系统的学习了Git，前后也就一两天的时间吧，从一个只知道git clone、git pull、git push的小白到现在不仅懂怎么操作还懂为什么这么操作的大白，真的很感激。
好的，彩虹屁到此为止ヽ(￣▽￣)و
关于教程中git rebase那一节不是很懂，后来又去官网研究了一下，发现其实很简单嘛，想在这里分享一下自己的一点浅薄的体会，如果有不对的地方还请海涵（指出）~

git rebase的目的是让当前分支同步目标分支的内容，只不过实现的形式跟git merge有一点区别。
实现的方式是先把当前分支自己的提交内容截掉保存起来，再把目标分支的提交拷贝过来，最后再把先前截掉的部分再接到后面。
此时当前分支的提交会超过目标分支，再切换到目标分支后merge当前分支，就可以保持两个分支进度一致了。
其实也就是以下过程：
master分支：A -> B -> C -> D
   dev分支：A -> B -> C' -> D'  (dev分支基于master分支的commit B，之后有了各自不同的提交)
1. 在dev分支执行$ git rebase：
master分支：A -> B -> C -> D
   dev分支：A -> B  (dev分支先拿掉C' D')
   dev分支：A -> B -> C -> D  (把C D拷贝过来)
   dev分支：A -> B -> C -> D -> C' -> D'  (再放回C' D')
2. 切换到master分支执行$ git merge：
master分支：A -> B -> C -> D -> C' -> D'  (master直接同步到最新提交)
   dev分支：A -> B -> C -> D -> C' -> D'

在git rebase的过程中如果出现了冲突：打开IDE解决冲突 -> git add -> git rebase --continue
如果要终止rebase：git rebase --abort