测试一下git
git init  //初始化一个git仓库
git add <file> //将一个文件添加到git仓库,可同时添加多个文件
git commit -m "提交说明" //将已添加的文件提交
git status  //查看当前git仓库状态
git diff <file> //查看文件修改内容
git log //查看仓库的版本,HEAD表示当前的版本
git reflog //查看已执行的命令记录
git reset --hard id  //回到到对应的版本，HEAD^回到上个版本，HEAD~N回到前N个版本
add的文件都会存在暂存区，commit的时候一并提交(仅提交暂存区里的内容)。
git checkout -- <file> //丢弃工作区的修改，将修改恢复到最近一次add或者commit
git reset HEAD <file> //丢弃暂存区的修改，将修改回退到工作区。
使用rm <file>直接删掉文件,可选择git rm <file>将版本库的也删掉，或者选择git checkout <file>将版本库中的文件恢复到工作区
git push origin master //将本地内容同步到GitHub
git clone https://github.com/oDANEDo/repository.git
git clone git@github.com:oDANEDo/repository.git
git branch //查看分支
git branch <branchName> //创建一个新分支
git checkout branchName //切换到branchName分支
git checkout -b branchName //等同于上面两行
git merge <branchName> //合并branchName分支到当前分支
git branch -d <branchName> //删除分支
解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。
用git log --graph命令可以看到分支合并图。
git stash  //可以先存储当前状态,再切换分支
git stash list  //查看当前stash里的内容
git stash apply stash@{0} //恢复指定的stash
git stash pop //恢复最新的stash内容,并切删除相对应的记录

查看远程库信息，使用git remote -v；
本地新建的分支如果不推送到远程，对其他人就是不可见的；
从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。
git tag v1.0   //默认给最新的commit添加标签
git tag v0.9 commitID //给指定的commitID加标签
git show <tagname>  //查看标签信息
git tag -a v0.1 -m "version 0.1 released" 1094adb //标签总是和某个commit关联的
git push origin <tagName> //推送一个本地标签
gpit push origin --tags //推送全部未推送过的本地标签
git tag -d <tagName> //删除一个本地标签
git push origin :refs/tags/<tagName>  //删除一个远程标签

