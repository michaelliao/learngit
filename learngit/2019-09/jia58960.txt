我的Git学习笔记：
集中式与分布式版本管理。

HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令：git reset --hard commit_id。
• 穿梭前，使用git log可以查看提交历史，以便确定要回退到哪个版本。
• 要重返未来，使用git reflog查看命令历史，以便确定要回到未来的哪个版本。

特别理解工作区与暂存区。然后commit其实是提交到本地仓库。

每次修改如果不add到暂存区，那就不会加入到commit中。意思是修改必须要先add存入到暂存区，然后commit才会到本地仓库里面

git restore -- readme.txt（旧版是git checkout -- readme.txt）意思就是，把readme.txt文件在工作区的修改全部撤销，有两种情况：
一种是readme.txt修改后还没有被放到暂存区，撤销修改就回到和版本库一模一样的状态；
一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存
区后的状态。
意思是可以撤销工作区和暂存区的修改内容。
加入已经git add 添加到暂存区了，要从暂存区撤回到工作区，使用git restore --staged readme.txt
加入已经commit到本地仓库了，要撤回到工作区使用上面提到的git reset HEAD^就行啦

不小心工作区删掉了文件，一是确实要从版本库中删除该文件，那就用命令git rm test.txt 删掉，并git commit -m "delete test file"。另一种情况就是删除了，要还原： git restore -- test.txt.

配置远程仓库信息：git remote add origin xxx@git.com:xxx/xxx.git
再推送到远程的origin仓库：git push -u origin master
完了后，以后推到远程仓库就只需要git push origin master

从远程库克隆一个新库下来：git clone git@github.com:xxx/gitskills.git

=================分支============
HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的是当前分支。



Git创建一个分支很快，因为除了增加一个dev指针，改改HEAD的指向，工作区的文件都没有任何变化！不过从现在开始，对工作区的修改和提交就是针对dev分支了，比如新提交一次后，dev指针往前移动一步，而master指针不变。
那合并呢？比如dev开发完了想合并到master分支上，咋办？直接把master指针指向当前的dev提交就可以了！

所以Git合并分支也很快！就改改指针，工作区内容也不变！

创建并切换到dev分支（-b表示创建并切换，相当于git branche dev和git checkout dev两条命令）：
git checkout -b dev。
使用git branch 查看所有分支。

git merge命令用于合并指定分支到当前分支。
比如：git checkout master，然后git merge dev。即合并dev分支到master主分支

log中的Fast-forward是Git想告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。

git branch -d dev 删除dev分支。

Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在master分支上工作效果是一样的，但过程更安全。Git鼓励大量使用分支。

默认的git merge dev 如果用了Fast-forward模式，Git就不会创建commit，[PS:Git也给出了提示：Fast-forward (no commit created; -m option ignored)]这样在删除分支后，就丢失了分支信息。

强制不启用Fast-forward只需要加上--no-ff就行了，
git merge --no-ff -m "必须写comment了哈" dev（别少了最后的dev分支名）

============重要=================
在实际开发中，我们应该按照几个基本原则进行分支管理：
首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；
在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本。
你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。
所以，团队合作的分支看起来就像这样：


==============高级部分===============
处理bug分支：每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。但现有的dev分支正在开发中，怎么办? 我们可以使用git stash来暂存工作现场！然后开bug分支来修复BUG：
首先要确定在哪个分支上修bug，如在master分支上修，就从master创建临时BUG分支：
git checkout master 
git checkout -b issue-101
修完分支后提交，git add . / git commit -m "fix bug101"
然后合并：git checkout master / git merge --no-ff -m "merge bug fix 101" issue-101
完了再回到我们的dev分支：git checkout dev / git status 发现工作区是干净的，刚才保留的现场呢？使用git stash list 来查看。两种恢复现场方式：第一种仅恢复不删除，第二种恢复且删除。
第一种：git stash apply stash@{0}恢复，git stash drop删除。
第二种：git stash pop stash@{0}
----------------------------------------------------------------------------------------------------
处理feature分支：新建feature分支，开发后该add该commit的都处理好，切回到dev分支，突然接到通知不需要该新功能了，那分支无用了。使用git branch -D feature来强制删除未合并的分支。
----------------------------------------------------------------------------------------------------
多人协作：使用git remote -v查看远程仓库信息，加上-v更详细。
推送分支就简单了：git push origin maser(dev)
哪些分支需要推送呢？：
master和dev肯定要推送的，因为团队所有成员都要同步。
bug分支用于在本地修复bug，没必要推了，除非需要有bug统计。
feature分支是否推送取决于你是否有和他人一起开发某个feature。
创建远程的origin/dev分支到本地：
git checkout -b dev origin/dev。这里本地的dev和远程的origin下的dev最好一样。
一般都必须要先git pull拉取，再git push到远程。
指定本地dev分支与远程origin/dev分支链接：git branch --set-upstream dev origin/dev

所以多人协作的模式应该是这样的：
首先，可以试图用git push origin branch-name推送自己的修改；
如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
如果合并有冲突，则解决冲突，并在本地提交；
没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！
如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。
----------------------------------------------------------------------------------------------------
标签管理：（标签可以理解为版本库的快照，相当于svn的tags）

首先切换到你要打标签的分支上，然后执行：git tag -a v1.0 -m "测试打标签"就打了个标签！
忘记打标签？先git log找到commit id，然后再打：git tag -a v0.9 -m "补上标签" ab748fd
使用git tag查看标签列表。（注意标签不是按时间输出的，而是按字母排序的！）
查看具体标签详情 git show v1.0
还可以用私钥签名一个标签： git tag -s v1.2 -m "signed 0.2 released" 4ssh3f
----------------------------------------------------------------------------------------------------
标签打错了删除就好了 git tag -d v0.1，因为我们打的标签全都存储在本地，又不会自动推到远程。所以可以在本地安全删除。如果要推送到远程：git push origin v1.0，或者一次性全推送完：git push origin --tags。
如果已经推送到远程了，还要删除呢？先从本地删：git tag -d v0.1
再从远程删：git push origin :refs/tags/v0.1

-------------------------------------
忽略某些特殊文件我们使用 .gitignore文件，一般在这里找就行了https://github.com/github/gitignore
前端常用的就那些，比如build、dist、node_modules、tests、.DS_Store等等
==========================================
【题外话：配置beyond compare 4为git diff和merge的默认工具】打开.gitconfig文件（这个文件一般在C:\Users\你电脑的用户名 目录下）
[gui]
    encoding = utf-8
[diff]
    tool = bc4
[difftool]
    prompt = false
[difftool "bc4"]
    cmd = "\"C:/Program Files/Beyond Compare 4/bcomp.exe\" \"$LOCAL\" \"$REMOTE\""
    
[merge]
    tool = bc
[mergetool]
    prompt = false
    keepBackup = false
[mergetool "bc"]
    cmd = "\"C:/Program Files/Beyond Compare 4/bcomp.exe\" \"$LOCAL\" \"$REMOTE\" \"$BASE\" \"$MERGED\""
注意：建议只比较一个文件：git difftool abc.txt，否则git会递归对比每一个文件。
