一、Git提交过程:
第一步:git add readme.txt 添加文件
说明:实际上就是把文件修改添加到暂存区
第二步:git commit -m "提交描述信息"
说明:实际上就是把暂存区的所有内容提交到当前分支
第三步:git push origin master  推送到远程master仓库 
说明:第一次提交用 git push -u origin master


简单理解:1.我们创建git版本库的时候,git自动帮我们创建一个master分支,所以,现在,git commit就是往master分支上提交修改.
       2.需要提交的文件修改统统放在暂存区,,然后一次性的提交暂存区的所有内容.


二、
1.git pull 拉取

2.git push origin master 推送master分支到远程仓库
git push origin dev 推送dev分支到远程仓库

3.git status 本地的状态

4.git checkout -- readme.txt 把readme.txt文件的在工作区的修改全部撤回,有2种情况:
第一种:readme.txt修改还没有被放到暂存区,现在,撤销修改就回到和版本库一模一样的状态
第二种:readme.txt修改已经放到暂存区,又做了修改,现在,撤销修改就回到添加到暂存区后的状态
总之,就是让这个文件回到最近一次git commit或者git add时的状态.其实就是用版本库的版本替换工作区的版本,无论工作区是修改,还是删除,都可以"一键还原"


5.git reset HEAD readme.txt  把readme.txt文件已经添加到暂存区的修改全部撤销

6.git reset --hard HEAD^  回到上个版本,放弃本地改变

7.git reset --hard 123456 回到commit_id是123456的版本,放弃本地改变

8.穿梭前,git log命令可以查看提交历史,以确定你要回到哪个版本.

9.要重返未来,git reflog,命令查看命令历史,以确定你要回到未来哪个版本.

10.git rm test.txt 删除文件,把工作区的修改添加到暂存区 
  温馨提示:先手动删除文件,然后使用 git add test.txt 和 git rm test.txt是一样的

三、
1.工作区(Work Directory):电脑里能看到的目录,例如:learngit文件夹就是一个工作区
2.版本库(Repository):工作区有一个.git文件夹,这个不是工作区,而是Git的版本库.版本库里存了很多东西,其中最重要的是stage(或者叫index)的暂存区,而Git为我们创建的第一个分支master,以及指向master的一个指针叫HEAD.

3.分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！

四、远程仓库
1.git remote add origin git@github.com:自己的github账号/learngit.git  本地仓库关联远程仓库
2.git clone git@github.com:自己的github账号/learngit.git   从远程仓库克隆

五、分支管理
1.git checkout -b dev  创建dev分支,然后切换到dev分支,相当于 创建分支(git branch dev) 和 切换分支(git checkout dev)这2个命令

2.git branch 查看所有分支,当前分支前面会出现一个※

3.合并分支
3.1先切换到被合并的分支master上
3.2 git merge dev 把dev分支快速合并到master上(这次合并是“快进模式”)
说明: git merge --no-ff -m "提交信息" dev 合并dev分支,禁止使用快进模式

4.git branch -d dev 删除分支

5.解决冲突
<<<<<<< HEAD
当前分支的内容
=======
要合并的分支的内容
>>>>>>> dev

第一步:git pull 拉取远程仓库代码
说明:如果git pull失败,原因是没有指定本地dev分支与远程origin/dev分支的链接,使用git branch --set-upstream-to=origin/dev dev命令
第二步:手动解决冲突
第三步:git commit -m "提交信息"
第四步:git push origin master 推送代码到远程仓库

------------------------------------------------------------------------
因此，多人协作的工作模式通常是这样：

首先，可以试图用git push origin <branch-name>推送自己的修改；

如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；

如果合并有冲突，则解决冲突，并在本地提交；

没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！

如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to <branch-name> origin/<branch-name>。
------------------------------------------------------------------------

6.git log --graph --pretty=oneline --abbrev-commit 查看分支合并情况

7.分支策略
1.实际开发中,master分支应该是非常平稳的,就仅仅是用来发布版本,平常不能在上边干活
2.有一个名字为dev的开发分支,每个小伙伴都有自己的分支,不断的合并到dev分支

8.当工作进行到一半的时候,来了现需要任务,我们需要储存现场
git stash 储存工作现场
git stash list 查看所有储存的工作现场
git stash apply 恢复工作现场,但不删除(如果删除,需要git stash drop)
git stash apply stash@{0} 恢复指定的工作现场
git stash pop 恢复工作现场,并删除

9.git branch -D dev 强行删除一个没有被合并过的分支dev 

10.git remote 查看远程仓库信息
git remote -v 查看远程仓库详细信息
git remote rm origin 删除已关联的名为origin的远程库

说明:本地新建的分支如果不推送到远程，对其他人就是不可见的.

11. git checkout -b dev origin/dev 创建远程仓库origin的dev分支到本地,创建本地分支dev

12.git rebase 变基(rebase操作的特点:把分叉的提交历史“整理”成一条直线，看上去更直观。缺点是本地的分叉提交已经被修改过了。)
说明:git用(HEAD -> master)和(origin/master)标识出当前分支的HEAD和远程origin的位置

六、标签管理(标签总是和某个commit挂钩。如果这个commit既出现在master分支，又出现在dev分支，那么在这两个分支上都可以看到这个标签。)
1.git tag 0.0.1 创建标签0.0.1
 git tag -a v0.1 -m "version 0.1 released" 1094adb 创建带有说明的标签，用-a指定标签名，-m指定说明文字

2.git tag 查看所有的标签

3.git tag 0.0.1 f52c633 给指定的commit_id打上标签

4.git show 0.0.1 查看表情信息

5.git tag -d 0.0.1 删除标签

6.git push origin 0.0.1 推送0.0.1标签到远程仓库
git push origin --tags 一次性推送所有的标签到远程仓库

7.删除远程仓库的标签
第一步:删除本地标签 git tag -d 0.0.1
第二步:从远程删除 git push origin :refs/tags/0.0.1 

七、开源库
fork 任意开源库,克隆代码到本地
pull request 给官方仓库来贡献代码

八、自定义Git
1.git config --global color.ui true 让Git显示颜色，会让命令输出看起来更醒目

2.忽略文件的原则是：
2.1忽略操作系统自动生成的文件，比如缩略图等；
2.2忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的.class文件；
2.3忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。

3.忽略文件
创建.gitignore文件,推送的远程仓库

4.git add -f App.class 如果你确实想添加该文件，可以用-f强制添加到Git

5.git check-ignore -v App.class 可能是.gitignore写得有问题，需要找出来到底哪个规则写错了，可以用git check-ignore命令检查


6.配置别名 
注意:1.配置Git的时候，加上--global是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。
    2.每个仓库的Git配置文件都放在.git/config文件中,别名就在[alias]后面，要删除别名，直接把对应的行删掉即可。
    3.当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig中,别名就在[alias]后面，要删除别名，直接把对应的行删掉即可。

git config --global alias.st status 我们只需要敲一行命令，告诉Git，以后st就表示status
说明: git st == git status

git config --global alias.co checkout  co表示checkout
说明: git co -- readme.txt == git checkout -- readme.txt

git config --global alias.ci commit    ci表示commit
说明: git ci -m "bala bala bala..." ==  git commit -m "bala bala bala..."

git config --global alias.br branch    br表示branch
说明: git br == git branch

git config --global alias.unstage 'reset HEAD'
说明: git unstage test.txt == git unstage test.txt

git config --global alias.last 'log -1' 显示最后一次提交信息
说明: git last ==  git log -1

git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
说明: git lg

九、搭建git服务器
1.硬件需要:搭建Git服务器需要准备一台运行Linux的机器，强烈推荐用Ubuntu或Debian，这样，通过几条简单的apt命令就可以完成安装。
2.安装过程:
2.1安装git: sudo apt-get install git
2.2创建一个git用户，用来运行git服务: sudo adduser git
2.3创建证书登录: 收集所有需要登录的用户的公钥，就是他们自己的id_rsa.pub文件，把所有公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个。
2.4初始化Git仓库: 
先选定一个目录作为Git仓库，假定是/srv/sample.git，在/srv目录下输入命令: 
 sudo git init --bare sample.git
Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以.git结尾。然后，把owner改为git：

 sudo chown -R git:git sample.git

2.5禁用shell登录:
出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑/etc/passwd文件完成。找到类似下面的一行:
git:x:1001:1001:,,,:/home/git:/bin/bash
修改为
git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell
这样，git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出。
2.6克隆远程仓库:
可以通过git clone命令克隆远程仓库了，在各自的电脑上运行:
git clone git@server:/srv/sample.git

注意:
    1.搭建Git服务器非常简单，通常10分钟即可完成；
    2.要方便管理公钥，用Gitosis；
    3.要像SVN那样变态地控制权限，用Gitolite。

------------------------------------------------------------------------
管理公钥
如果团队很小，把每个人的公钥收集起来放到服务器的/home/git/.ssh/authorized_keys文件里就是可行的。如果团队有几百号人，就没法这么玩了，这时，可以用Gitosis来管理公钥。

管理权限
有很多不但视源代码如生命，而且视员工为窃贼的公司，会在版本控制系统里设置一套完善的权限控制，每个人是否有读写权限会精确到每个分支甚至每个目录下。因为Git是为Linux源代码托管而开发的，所以Git也继承了开源社区的精神，不支持权限控制。不过，因为Git支持钩子（hook），所以，可以在服务器端编写一系列脚本来控制提交等操作，达到权限控制的目的。Gitolite就是这个工具。
------------------------------------------------------------------------

思考1:一个本地库能不能既关联GitHub，又关联码云呢？
答案是肯定的，因为git本身是分布式版本控制系统，可以同步到另外一个远程库，当然也可以同步到另外两个远程库。
使用多个远程库时，我们要注意，git给远程库起的默认名称是origin，如果有多个远程库，我们需要用不同的名称来标识不同的远程库。

git remote add github git@github.com:github账号/learngit.git
git remote gitee github git@github.com:mayun账号/learngit.git

如果要推送到GitHub，使用命令:git push github master
如果要推送到码云，使用命令:git push gitee master



