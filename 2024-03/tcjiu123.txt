整理来自：
	廖雪峰的Git教程：https://www.liaoxuefeng.com/wiki/896043488029600
	
常用网址：
	Git：https://git-scm.com/
	Github：https://github.com/
	Gitee：https://gitee.com/
	Git命令：https://liaoxuefeng.gitee.io/resource.liaoxuefeng.com/git/git-cheat-sheet.pdf
	
git安装：
	linux: sudo apt-get install git # git-core
	windows: 官网链接：https://git-scm.com/downloads  
			 Git Bash: git config --global user.name "Your Name"; git config --global user.email "email@example.com"

初始化git仓库：git init; ls -ah # .git目录用于跟踪管理版本库
添加文件到仓库：
	移到暂存区：git add <file>; 
	提交到分支：git commit -m "说明"
查看工作区状态：git status
查看文件修改：git diff # 确认修改，add commit
	工作区&暂存区  git diff <file>
	工作区&版本库  git diff HEAD <file>
	暂存区&版本库  git diff --cached <file>
查看提交日志：git log # --pretty=oneline --abbrev
版本回退：
	回退上一版本：git reset --hard HEAD^ # 上上版本HEAD^^ 往前100个版本HEAD~100
	回退指定commit id：git reset --hard <commit-id>
查看命令历史：git reflog
概念：工作区(文件夹)--版本库(.git)--git add到暂存区(stage) & git commit到分支(master/dev)
撤回修改：
	工作区的修改：git checkout -- <file> # git restore <file>
	暂存区的修改：git reset HEAD <file> # git restore --stage <file>
	# git reset HEAD <file> 保留了工作目录中对文件的修改，git restore --staged <file> 则会覆盖工作目录中对文件的修改
删除文件：rm; git rm <file>
恢复误删文件(未提交)：git checkout -- <file>
远程仓库：
	生成SSH KEYS：ssh-keygen -t rsa -C "youremail@example.com"
	登陆Github：Account settins---SSH KEYS---粘贴id_rsa.pub # 一般在用户主目录/.ssh/下面
	--------------------------本地库->远程库---------------------------------
	添加远程库：Github---Create a new repo 假设github用户名为user1,仓库名为repo1
	本地库关联远程库：git remote add origin git@github.com:user1/repo1.git # origin默认远程库名
	本地库内容推送到远程：git push -u origin master # -u 第一次推送master分支使用，关联分支，简化后续命令
	查看远程库信息：git remote -v
	删除关联远程库：git remote rm origin
	--------------------------远程库克隆(从零开推荐)--------------------------
	Github---Create a new repo---with a README---settings---Default branch(master)
	克隆：git clone git@github.com:user1/repo1.git
	# 默认clone只抓取master分支，其他需要单独抓取
	# Git支持多种协议：ssh速度快，https速度慢/每次推送输口令/适用于只开HTTP端口的

分支：
	查看分支：git branch
	创建分支：git branch <name>
	切换分支：git checkout <name>或者git switch <name>
	创建+切换分支：git checkout -b <name>或者git switch -c <name>
	合并某分支到当前分支：git merge <name> # 默认Fast-Forward快进模式
		合并冲突时需手动解决冲突：git status查看---修改冲突文件
	分支合并情况查看：git log --graph --pretty=oneline --abbrev-commit
	删除分支：git branch -d <name>
	强行丢弃未被合并的分支：git branch -D <name>
	普通模式合并： git merge --no-ff -m "merge with no-ff" <name>  # 方便查看合并历史
	推送分支：git push origin <name> # 推送失败，因为远程分支比本地更新，需要先用git pull试图合并/解决冲突，并在本地提交
	抓取分支：
		本地创建和远程分支对应的分支：git checkout -b branch-name origin/branch-name
		建立本地分支和远程分支的关联：git branch --set-upstream-to=origin/dev dev
		从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。
		
bug修复：
	案例：dev上的工作未提交，需要修复master分支上的bug
	dev上储藏工作现场：git stash; 切换到master上，创建issue分支修复bug,完成后合并，删除issue，切换回dev
	dev上查看工作现场：git stash list 
		恢复现场同时删除stash：git stash pop
		恢复指定stash：git stash apply stash@{0} 删除stash：git stash drop
	发现dev上有相同bug：切换到dev上 git cherry-pick <fixbug-commitid>		

整理历史基线：git rebase # 把分叉的提交历史“整理”成一条直线
	rebase操作可以把本地未push的分叉提交历史整理成直线；
	rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。

标签：
	查看所有标签：git tag
	查看标签详细：git show <tagname>
	新建标签：git tag <tagname> # 默认HEAD
	指定标签：git tag <tagname> <commmit-id>
	带说明的：git tag <tagname> -m "说明" <commmit-id>
	# 标签总是和某个commit挂钩。如果这个commit既出现在master分支，又出现在dev分支，那么在这两个分支上都可以看到这个标签。
	推送单个标签：git push origin <tagname>
	推送所有标签：git push origin --tags
	删除本地标签：git tag -d <tagname>
	删除远程标签：先删本地，然后git push origin :refs/tags/<tagname>

GitHub使用：
在GitHub上，可以任意Fork开源项目，自己拥有Fork后的仓库的读写权限；可以推送PR(pull request)给官方仓库来贡献代码。	
如何在GitHub上发起第一个拉取请求：https://www.freecodecamp.org/news/how-to-make-your-first-pull-request-on-github-3/

自定义Git：
	颜色显示：git config --global color.ui true
	忽略某些文件：.gitignore # .gitignore文件本身要放到版本库里，方便多人协作，在另外一个机器上不用重新设置ignore
		1.忽略操作系统自动生成的文件，比如缩略图等；
		2.忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的.class文件；
		3.忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。
		添加失败：
			强制添加被忽略的文件：git add -f App.class
			检查忽略规则：git check-ignore -v App.class
		在线生成：https://michaelliao.github.io/gitignore-online-generator/
	别名配置参考：
		git config --global alias.st status
		git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
	配置文件路径：
		仓库：gitrepo/.git/config
		用户：家目录/.gitconfig
	
搭建Git服务器：
	1.安装git：sudo apt-get install git
	2.创建用户：sudo adduser git
	3.创建证书登录：收集所有需要登录的用户的公钥，即id_rsa.pub文件，把所有公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个。
	4.初始化Git裸仓库：假定目录是/srv/sample.git，在其下操作
		sudo git init --bare sample.git # 裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区
		sudo chown -R git:git sample.git 
	5.禁用shell登录：
		git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell # 修改/etc/passwd文件
		# git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出
	6.克隆远程仓库：git clone git@server:/srv/sample.git
	补充：人多方便管理公钥，用Gitosis；要像SVN那样变态地控制权限，用Gitolite。

Git图形界面使用：Sourcetree























