老师你好！您的Git教程对我帮助很大。谢谢。这是根据我自己习惯的归类总结的Git命令(草稿版)。请笑纳。
对不起，占用您的Git空间了，好羞耻。。。好羞羞。。


git config --global user.name ""
git config --global user.email ""

git init:初始一个Git仓库
git add "file name"：添加文件到Git仓库
git commit -m "描述"：条件文件到Git仓库
git status：查看Git仓库状态
git diff：查看修改内容(当前分支分支某个文件工作区和暂存区的修改对比)

git reset --hard 版本号：回退到指定版本
git reset --hard HEAD^：回退到上一个版本

git log：查看文件操作记录
git reflog：命令命令操作历史

git remote；查看远程库名称
git remote -v：查看远程库详细信息
git remote add origin git@server-name:path/repo-name.git:本地仓库关联一个远程库
git clone git@server-name:path/repo-name.git：克隆远程仓库到本地

git rm file name：从版本库中删除文件

git push -u origin master：第一次推送master分支的所有内容
git push origin master：推送最新修改
git push origin branch name：推送指定分支。如果是第一次推送会在GitHub上新建此分支。
git pull：从远程库拉取当前分支，即更新。

git checkout -b branch name：创建分支并切换到饭
git checkout branch name：切换分支
git checkout -b dev origin/dev：在本地创建和远程仓库中对应的分支。
git checkout -- file name：让工作区的文件回退到最后一次add或commit操作是的状体


git merge branch name：将指定分支合并到当前分支，Fast-forward为“快进模式”，直接将master指向指定分支。此情况可以顺利执行，不会提示有冲突：你在创建完分支并进行文件修改期间没有其他人向master提交，也就说在你merge时你是在最新版本上进行修改的，否则会提示文件有冲突，冲突的情况下需要手工修改文件解决冲突在进行merge。解决冲突后会将合并好的文件提交到版本库。
git merge --no-ff -m "merge with no-ff" dev：不使用Fast-forward模式。

git branch branch name：创建分支
git branch -d branch name：删除分支(如果分支有文件修改而没有merge会不让删除)
git branch -D branch name：强制删除分支
git branch：查看分支
git branch --set-upstream-to <branch-name> origin/<branch-name>：将本地分支与远程库中的分支关联

git stash：将当前工作区储藏
git stash list：查储藏工作区列表
git stash pop：回复并删除储藏区
git stash apply：回复储藏区
git stash drop：删除储藏区


git tag tag-nam：给最近的commit打一个标签
git -a tag-name -m "desc"：给最近的commit打一个标签，并给标签添加描述
git tag：查看所有标签
git show tag-name：查看标签信息
git tag -d tag-name：删除标签

新增文件：会出现在各个分支的工作区和暂存区中，那个分支先进行git commit，这个新增文件就是那个分支的，commit后其他分析就看不见了。
修改文件：修改文件如果不进行commit是不允许进行git checkout 切换分支的。
即一个文件commit一个分支后才会明确属性那个分支，否则之前会逗留在每个分支的工作区和暂存区。


dev类型分支：分支用于开发，多人开发的代码合并到dev分支。
master主分支：想远程Git库push和pull用。一般当在dev上开发完成一个版本或一个阶段后会将dev合并到master主分支。
feature类型分支：用于开发新功能。
issuse类型分支：用于修改bug和修复问题。
