git bash
安装完成   --welcome
$ git config --global user.name  "Your Name"
$ git config --global user.email  "email@example.com"
输入git config user.name 和git config user.email 可查看。
两个重复，可用https://www.jianshu.com/p/d24e791a7679查找。
创建版本库
 cd D:
 库名（用英文）
pwd 显示当前目录
git init   把这个目录变成Git可以管理的仓库
用ls -ah命令可看 .git目录
编写txt 文件（放于库名目录下） ，用VS Code
把一个文件放到Git仓库
  1.git add    文件.txt        文件添加到仓库
  2.git commit    -m "wrote a 文件 file"             文件提交到仓库
git status  可查看仓库当前的状态
git diff      查看difference
       -Git is a version control system.原始语句
       +Git is a distributed version control system. 改变后的语句

版本2：add distributed
Git is a distributed version control system.
Git is free software.

git commit -m  "append GPL"
git commit -m  "git tracks changes"   即m “所修改的句子”
版本3：append GPL
Git is a distributed version control system.
Git is free software distributed under the GPL.

git log  看历史记录
           +--pretty=oneline     得版本号

退回上一个版本      git   reset --hard HEAD^
       上上一个版本  git   reset --hard HEAD^^
回到现版本             git  reset --hard 版本号前六位或任意几位 
下次打开
 cd E:
cd learngit
 
cat 文件名.txt        表示查看该文件内容
https://vscode.cdn.azure.cn/stable/30d9c6cd9483b2cc586687151bcbcd635f373630/VSCodeUserSetup-x64-1.68.1.exe
--extensions-dir  "E:\extensions"

恢复未来的版本
用 git reflog
$ git reflog
e475afc                 HEAD@{1}: reset: moving to HEAD^
1094adb              (HEAD -> master) HEAD@{2}: commit: append GPL
e475afc                 HEAD@{3}: commit: add distributed
eaadf4e                  HEAD@{4}: commit (initial): wrote a readme file
版本号

git是严格遵守从工作区add到暂存区，再commit暂存区到分支。

git checkout -- readme.txt
                          文件名
把readme.txt文件在工作区的修改全部撤销，这里有两种情况：

一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；

一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
 
胡话 git add到暂存区
git reset HEAD readme.txt  可以把暂存区的修改撤销掉（unstage），重新放回工作区
git checkout -- readme.txt
git status
 On branch master
 nothing to commit, working tree clean
已去除胡话

                            从暂存区恢复工作区，
                              git resotre --worktree readme.txt

                从master恢复暂存区 
                git restore --staged readme.txt

         从master同时恢复工作区和暂存区
        git restore --source=HEAD --staged --worktree readme.txt
新建文件readme3.txt
用 vi readme3.txt
在vi readme3.txt 编辑界面可进行编辑
如何返回到原来 git bash 命令行窗口?
先按esc，
        再按:q
          :wq：在命令模式下，执行存盘退出操作；
           : w：在命令模式下，执行存盘操作；
          :w！：在命令模式下，执行强制存盘操作；
              :q：在命令模式下，执行退出vi操作；
          :q！：在命令模式下，执行强制退出vi操作.

$ git add test.txt
$ git commit -m "add test.txt"
删掉没用的文件
1.确实要从版本库中删除该文件  
   $ git rm test.txt
   $ git commit -m "remove test.txt"
2.把误删的文件恢复到最新版本
   $ git checkout -- test.txt 
如何添加公钥
  github ->settings->SSH and GPG keys
add SSH keys
复制id_rsa.pub里的全部内容
（id_rsa是私钥）
在GitHub上免费托管的Git仓库，任何人都可以看到喔（但只有你自己才能改）。所以，不要把敏感信息放进去。
如果你不想让别人看到Git库，有两个办法，一个是交点保护费，让GitHub把公开的仓库变成私有的，这样别人就看不见了（不可读更不可写）。
另一个办法是自己动手，搭一个Git服务器，因为是你自己的Git服务器，所以别人也是看不见的。

github的+ ->new repository
Repository name ->learngit
关联本地库
$ git remote add origin git@github.com:michaelliao/learngit.git
                                                 michaelliao ->GitHub账户名
origin是默认习惯命名
yes  你实在担心有人冒充GitHub服务器，
       输入yes前可以对照GitHub的RSA Key的指纹信息是否与SSH连接给出的一致。
推送到远程
第一步 要 $ git push -u origin master      
           加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，
            还会把本地的master分支和远程的master分支关联
本地修改作提交，把最新修改推送至GitHub的命令：
            $ git push origin master 
查看远程库信息
           $ git remote -v
删除origin
        $ git remote rm origin（解除了本地和远程的绑定关系）

SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步。

从远程库克隆
远程库的名字为 gitskills
$ git clone git@github.com:michaelliao/gitskills.git
                                             michaelliao ->GitHub账户名
查看
$ cd gitskills
$ ls
可以从别人的github库中克隆到自己的本地，再上传到自己的远程库再成为自己的。

创建与合并分支
1.创建dev分支 ->切换到dev分支
   $ git checkout -b dev/ $ git switch -c dev
2.查看当前分支
   $ git branch
3.在readme.txt中加一行 ：Creating a new branch is quick.
4.提交  
  $ git add readme.txt 
  $ git commit -m "branch test"
5.切换回master分支
   $ git checkout master/$ git switch master
6.把dev分支的工作成果合并到master分支上
   $ git merge dev
 Fast-forward --快进模式
7.删除dev分支
  $ git branch -d dev
8.查看branch
  $ git branch
  
小结
查看分支：git branch

创建分支：git branch <name>

切换分支：git checkout <name>或者git switch <name>

创建+切换分支：git checkout -b <name>或者git switch -c <name>

合并某分支到当前分支：git merge <name>

删除分支：git branch -d <name>

当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。
用git log --graph命令可以看到分支合并图。
 
合并后，我们用git log看看分支历史：
$ git log --graph --pretty=oneline --abbrev-commit

分支管理策略
1.创建并切换dev分支：$ git switch -c dev
2.修改readme.txt文件
3.提交一个新的commit
  $ git add readme.txt 
  $ git commit -m "add merge"
4.切换回master
  $ git switch master
5.准备合并dev分支，请注意--no-ff参数，表示禁用Fast forward
  $ git merge --no-ff -m "merge with no-ff" dev(要创建一个新的commit，所以加上-m参数，把commit描述写进去)
6.看分支历史
  $ git log --graph --pretty=oneline --abbrev-commit


合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，
而fast forward合并就看不出来曾经做过合并。

Bud分支
修复一个代号101的bug的任务
创建一个分支issue-101来修复它
必须在两个小时内修复该bug
1.“储藏”当前工作现场
     $ git stash
2.查看工作区
     $git status
3.确定要在哪个分支上修复bug（假定需要在master分支上修复）
   从master创建临时分支
  $ git checkout master
  $ git checkout -b issue-101
4.文本中的“Git is free software ...”改为“Git is a free software ...”
5. 提交：$ git add readme.txt 
              $ git commit -m "fix bug 101"
6.切换到master分支，并完成合并，最后删除issue-101分支
              $ git switch master
              $ git merge --no-ff -m "merged bug fix 101" issue-101
7.回到dev分支
               $ git switch dev
               $ git status
 查看工作现场命令：
              $ git stash list
 恢复stash内容
一、git stash apply   但stash内容并不删除 ，要用git stash drop来删除
二、git stash pop      恢复的同时把stash内容也删了        查看命令：git stash list  多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash，用命令：
$ git stash apply stash@{0}
在master分支上修复的bug，想要合并到当前dev分支，可以用git cherry-pick <commit>命令，
把bug提交的修改“复制”到当前分支，避免重复劳动。      
 指令：
$ git branch
$ git cherry-pick 4c805e2
  
                              
$ git add readme.txt 
$ git commit -m "fix bug 101"
[issue-101 4c805e2] fix bug 101
 <commit>   ->4c805e2

Feature分支
开发代号为Vulcan的新功能
1.$ git switch -c feature-vulcan
2.新建vulcan.py
3.$ git add vulcan.py
   $ git status
   $ git commit -m "add feature vulcan"
4.切换：$ git switch dev
feature分支和bug分支是类似的，合并，然后删除。
5.若取消新功能 ，则命令为：$ git branch -D feature-vulcan

多人协作
多人协作的工作模式通常是这样：
1.首先，可以试图用git push origin <branch-name>推送自己的修改；          $ git push origin dev
2.如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
3.如果合并有冲突，则解决冲突，并在本地提交；
4.没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！
如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，
用命令git branch --set-upstream-to <branch-name> origin/<branch-name>。

查看远程库信息，使用git remote -v；
本地新建的分支如果不推送到远程，对其他人就是不可见的；
从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。

git rebase  能把把分叉的提交变成直线

命令git tag <tagname>用于新建一个标签，默认为HEAD，也可以指定一个commit id；  $ git tag v1.0
命令git tag -a <tagname> -m "blablabla..."可以指定标签信息；   用-a指定标签名，-m指定说明文字  $ git tag -a v0.1 -m "version 0.1 released" 1094adb  
命令git tag可以查看所有标签。
用命令git show <tagname>可以看到说明文字 。 
     
命令git push origin <tagname>可以推送一个本地标签；
命令git push origin --tags可以推送全部未推送过的本地标签；
命令git tag -d <tagname>可以删除一个本地标签；
命令git push origin :refs/tags/<tagname>可以删除一个远程标签。
   

远程库存在     remote origin already exists.
解决方法

如何推送一个pull request
1.点击Pull requests
2.点击New pull request
3.create pull request
4.在提交中，描述提交本地提交的说明。


error: failed to push some refs to
本地与远程产生冲突
方法1.强覆盖                 git  push -f  origin master
方法2.拉取再提交             git  pull --rebase origin master    (推荐)
 
                                                              